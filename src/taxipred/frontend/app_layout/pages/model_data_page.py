import httpx
import altair as alt
import streamlit as st
import pandas as pd
from taxipred.utils.helpers import read_api_endpoint

API_URL_MODEL = read_api_endpoint("/model/statistics")
API_URL_RESIDUALS = read_api_endpoint("/model/residuals")
st.header("Modellprestanda üìà")

# H√§mta modellstatistik fr√•n API
with httpx.Client(timeout=10) as client:
    response = client.get(API_URL_MODEL)
    response.raise_for_status()
    stats = response.json()["stats"]

with httpx.Client(timeout=10) as client:
        response = client.get(f"{API_URL_RESIDUALS}?top_n=5")
        response.raise_for_status()
        residuals = response.json()["residuals"]

col1, col2, col3= st.columns(3)
col1.metric("MAE", f"{stats['mae']:.2f} kr")
col2.metric("RMSE", f"{stats['rmse']:.2f} kr")
col3.metric("R¬≤", f"{stats['r2']:.2f}")

with st.expander("Hur man tolkar modellstatistiken"):
    st.markdown("""
    - **MAE (Mean Absolute Error):** Hur mycket modellen i genomsnitt avviker fr√•n verkliga priser.
    - **RMSE (Root Mean Squared Error):** Tar st√∂rre h√§nsyn till stora avvikelser.
    - **R¬≤:** Hur stor del av variationen i data som modellen f√∂rklarar (1 = perfekt, 0 = ingen f√∂rklaring).
    """)

# prediction vs real price
st.subheader("Prediktion vs Verkligt pris")
df_pred = pd.DataFrame({
    "Predicted": stats["predicted_prices"],
    "Actual": stats["actual_prices"]
})


line = alt.Chart(pd.DataFrame({
    'x': [df_pred["Actual"].min(), df_pred["Actual"].max()],
    'y': [df_pred["Actual"].min(), df_pred["Actual"].max()]
})).mark_line(color='red', strokeDash=[5,5]).encode(
    x='x',
    y='y'
)
df_pred["Residual"] = df_pred["Actual"] - df_pred["Predicted"]
scatter = alt.Chart(df_pred).mark_circle(size=60, opacity=0.6).encode(
    x=alt.X('Actual', title='Verkligt pris'),
    y=alt.Y('Predicted', title='Predikterat pris')
)
st.altair_chart(scatter + line, use_container_width=True)
with st.expander("Tolka scatterplott och referenslinje"):
    st.markdown("""
    - Punkterna representerar varje resa: x = verkligt pris, y = predikterat pris.
    - Den r√∂da streckade linjen visar perfekt prediktion.
    - Punkter ovanf√∂r linjen betyder att modellen underskattade priset, under = √∂verskattade.
    """)

st.subheader("Residualer (verkligt - predikterat)")
st.bar_chart(df_pred["Residual"])
df_pred["Residual"] = df_pred["Actual"] - df_pred["Predicted"]
scatter = alt.Chart(df_pred).mark_circle(size=60, opacity=0.6).encode(
    x=alt.X('Actual', title='Verkligt pris'),
    y=alt.Y('Predicted', title='Predikterat pris')
)

st.markdown("St√∂rsta residualer")
st.write("St√∂rsta negativa residualer (modell √∂verskattade):")
st.dataframe(residuals["negative_residuals"])

st.write("St√∂rsta positiva residualer (modell underskattade):")
st.dataframe(residuals["positive_residuals"])

    
st.write("S√• hur ska det h√§r tolkas? üí°")
st.info("""
        Residualer visar hur mycket modellen skiljer sig fr√•n verkliga v√§rden.

        - En **negativ residual** betyder att modellen **f√∂ruts√•g ett h√∂gre pris** √§n det faktiska.  
        ‚ûú Modellen √∂verskattade priset.
        
        - En **positiv residual** betyder att modellen **f√∂ruts√•g ett l√§gre pris** √§n det faktiska.  
        ‚ûú Modellen underskattade priset.

        Ju **mindre residualer**, desto mer tr√§ffs√§ker √§r modellen.  
        Stora residualer kan uppst√• vid ovanliga kombinationer av faktorer, t.ex.:
        - mycket l√•nga eller mycket korta resor,  
        - extrema trafikf√∂rh√•llanden eller v√§der,  
        - tider p√• dygnet d√§r f√• resor finns i tr√§ningsdata.

        üìä Genom att analysera dessa kan vi f√∂rst√• hur vi ska samla in data f√∂r att korrekt tr√§na modellen.
        """)